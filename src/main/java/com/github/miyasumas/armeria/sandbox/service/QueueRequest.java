/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */
package com.github.miyasumas.armeria.sandbox.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-29")
public class QueueRequest implements org.apache.thrift.TBase<QueueRequest, QueueRequest._Fields>, java.io.Serializable,
	Cloneable, Comparable<QueueRequest> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		"QueueRequest");

	private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
		"priority", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
		"userId", org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new QueueRequestStandardSchemeFactory());
		schemes.put(TupleScheme.class, new QueueRequestTupleSchemeFactory());
	}

	public int priority; // optional
	public int userId; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		PRIORITY((short) 1, "priority"),
		USER_ID((short) 2, "userId");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PRIORITY
				return PRIORITY;
			case 2: // USER_ID
				return USER_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __PRIORITY_ISSET_ID = 0;
	private static final int __USERID_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = { _Fields.PRIORITY };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			_Fields.class);
		tmpMap.put(_Fields.PRIORITY,
			new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.USER_ID,
			new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueueRequest.class, metaDataMap);
	}

	public QueueRequest() {
		this.priority = 100;

	}

	public QueueRequest(
		int userId) {
		this();
		this.userId = userId;
		setUserIdIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public QueueRequest(QueueRequest other) {
		__isset_bitfield = other.__isset_bitfield;
		this.priority = other.priority;
		this.userId = other.userId;
	}

	public QueueRequest deepCopy() {
		return new QueueRequest(this);
	}

	@Override
	public void clear() {
		this.priority = 100;

		setUserIdIsSet(false);
		this.userId = 0;
	}

	public int getPriority() {
		return this.priority;
	}

	public QueueRequest setPriority(int priority) {
		this.priority = priority;
		setPriorityIsSet(true);
		return this;
	}

	public void unsetPriority() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	/** Returns true if field priority is set (has been assigned a value) and false otherwise */
	public boolean isSetPriority() {
		return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	public void setPriorityIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
	}

	public int getUserId() {
		return this.userId;
	}

	public QueueRequest setUserId(int userId) {
		this.userId = userId;
		setUserIdIsSet(true);
		return this;
	}

	public void unsetUserId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	/** Returns true if field userId is set (has been assigned a value) and false otherwise */
	public boolean isSetUserId() {
		return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	public void setUserIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case PRIORITY:
			if (value == null) {
				unsetPriority();
			} else {
				setPriority((Integer) value);
			}
			break;

		case USER_ID:
			if (value == null) {
				unsetUserId();
			} else {
				setUserId((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case PRIORITY:
			return getPriority();

		case USER_ID:
			return getUserId();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case PRIORITY:
			return isSetPriority();
		case USER_ID:
			return isSetUserId();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof QueueRequest)
			return this.equals((QueueRequest) that);
		return false;
	}

	public boolean equals(QueueRequest that) {
		if (that == null)
			return false;

		boolean this_present_priority = true && this.isSetPriority();
		boolean that_present_priority = true && that.isSetPriority();
		if (this_present_priority || that_present_priority) {
			if (!(this_present_priority && that_present_priority))
				return false;
			if (this.priority != that.priority)
				return false;
		}

		boolean this_present_userId = true;
		boolean that_present_userId = true;
		if (this_present_userId || that_present_userId) {
			if (!(this_present_userId && that_present_userId))
				return false;
			if (this.userId != that.userId)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_priority = true && (isSetPriority());
		list.add(present_priority);
		if (present_priority)
			list.add(priority);

		boolean present_userId = true;
		list.add(present_userId);
		if (present_userId)
			list.add(userId);

		return list.hashCode();
	}

	@Override
	public int compareTo(QueueRequest other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriority()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("QueueRequest(");
		boolean first = true;

		if (isSetPriority()) {
			sb.append("priority:");
			sb.append(this.priority);
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("userId:");
		sb.append(this.userId);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
				new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
				new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class QueueRequestStandardSchemeFactory implements SchemeFactory {
		public QueueRequestStandardScheme getScheme() {
			return new QueueRequestStandardScheme();
		}
	}

	private static class QueueRequestStandardScheme extends StandardScheme<QueueRequest> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, QueueRequest struct)
			throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PRIORITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.priority = iprot.readI32();
						struct.setPriorityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // USER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.userId = iprot.readI32();
						struct.setUserIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			if (!struct.isSetUserId()) {
				throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'userId' was not found in serialized data! Struct: " + toString());
			}
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, QueueRequest struct)
			throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetPriority()) {
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(USER_ID_FIELD_DESC);
			oprot.writeI32(struct.userId);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class QueueRequestTupleSchemeFactory implements SchemeFactory {
		public QueueRequestTupleScheme getScheme() {
			return new QueueRequestTupleScheme();
		}
	}

	private static class QueueRequestTupleScheme extends TupleScheme<QueueRequest> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, QueueRequest struct)
			throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeI32(struct.userId);
			BitSet optionals = new BitSet();
			if (struct.isSetPriority()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetPriority()) {
				oprot.writeI32(struct.priority);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, QueueRequest struct)
			throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.userId = iprot.readI32();
			struct.setUserIdIsSet(true);
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				struct.priority = iprot.readI32();
				struct.setPriorityIsSet(true);
			}
		}
	}

}
